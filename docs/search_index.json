[["1_1-metricas_basicas.html", "1 Métricas báscias 1.1 Incidencia 1.2 Prevalencia 1.3 Severidad 1.4 Wide (sev y yield) a long 1.5 Mapa de prevalencia", " 1 Métricas báscias Cargamos datos y paquetes library(tidyverse) load(&quot;data/data.RData&quot;) Olivo/bacteriosis — olivo %&gt;% view dataset formato “wide” (planilla de campo) con 30 columnas de sev por arbol individual [datos simulados] Re-estructuracion — Pasamos de formato wide a long para hacer operaciones por grupos. Ojo: No siempre debe hacerse este paso aunque nos habilita a group_by()+ summarise() # le pedimos que apile las columnas conteniendo a las plantas 1 a 30 # el nombre de las columnas las apile en una columna llamada “tree” # la observaciones de severidad las apile en una columna llamada sev # el producto de este re-arreglo se llamará “oli_long” olivo %&gt;% pivot_longer(cols = `1`:`30`, names_to = &quot;tree&quot;, values_to = &quot;sev&quot;) -&gt; oli_long Chequeamos cuántos árboles fueron evaluados en cada año/región/lote: oli_long Chequeamos cuantos arboles se evaluaron por campo oli_long %&gt;% group_by(year, loc, farm) %&gt;% summarise(n= sum(!is.na(sev))) %&gt;% pivot_wider(names_from=year, values_from = n) Imprimimos los 30 árboles de un mismo lote oli_long %&gt;% arrange(loc, year) %&gt;% print(n=30) 1.1 Incidencia (nivel lote - evolución interanual) Probamos el artilugio matemático que nos permitirá calcular la proporción de árboles enfermos muestra1 &lt;- c(0,1) mean(muestra1) muestra2 &lt;- c(0,0,0,0,1) mean(muestra2) muestra3 &lt;- c(1,1,1,1,1,1,1,1,0,0) mean(muestra3) Ahora si, aplicaremos el artilugio a nuestros datos. Tip: pueden ir seleccionando por lineas para ir probando el codigo antes de ejecutarlo por completo (seleccionar hasta antes de cada pipe, sino quedará abierta la sentencia) oli_long %&gt;% mutate(diseased = sev&gt;0) %&gt;% group_by(year, loc, farm) %&gt;% summarise(inc = mean(diseased, na.rm=TRUE)*100) %&gt;% ungroup %&gt;% arrange(loc, year) -&gt; oli_inc Damos print a “oli_inc” oli_inc Graficamos oli_inc (una de las posibilidades) oli_inc %&gt;% ggplot()+ # aes(x=factor(year), y=inc) + aes(x=factor(year), y=inc, color=factor(farm)) + geom_point() + # geom_line() + geom_line(aes(group=farm)) + facet_grid(. ~ loc) 1.2 Prevalencia Nivel región - evolución interanual oli_inc %&gt;% mutate(diseased_farm = inc&gt;0) %&gt;% group_by(year, loc) %&gt;% summarise(prev = mean(diseased_farm, na.rm=TRUE)*100) %&gt;% ungroup %&gt;% arrange(loc,year) -&gt; oli_prev oli_prev Plot de oli_prev oli_prev %&gt;% ggplot()+ aes(x=factor(year), y=prev, color=factor(loc)) + geom_point() + geom_line(aes(group=loc)) 1.3 Severidad Calculamos ambas severidades vistas en la introducción teórica NOTA: en el teórico la sev_cond daba “NaN” en aquellos casos en que todos los arboles tenian sev=0, y en el filtrado sev[which(sev &gt; 0)] el vector quedaba vacío. oli_long %&gt;% group_by(year, loc, farm) %&gt;% summarise( sev_media = mean(sev, na.rm=TRUE), sev_cond =mean(sev[which(sev &gt; 0)])) %&gt;% ungroup %&gt;% mutate_all(~replace(., is.nan(.), 0)) %&gt;% arrange(loc, year) -&gt; oli_sev oli_sev Print oli_sev oli_sev Plot oli_sev Aprovechamos a usar una función muy eficiente que puede resultar una gran aliada en nuestro trabajo cotidiano: stat_summary() oli_sev %&gt;% ggplot()+ aes(x=loc, y =sev_media)+ geom_point(alpha=.3)+ facet_wrap(&quot;year&quot;)+ stat_summary(fun = mean, geom = &quot;crossbar&quot;, col=&quot;blue&quot;)+ stat_summary(aes(label=..y.. %&gt;% round(1)), fun=mean, geom=&quot;text&quot;, size=4, vjust = -0.5) + scale_x_discrete(guide = guide_axis(n.dodge = 2)) Bonus 1 1.4 Wide (sev y yield) a long Soja es el típico dataset de un experimento de campo donde evaluamos severidad y rendimiento de las parcelas soja %&gt;% view Vemos que tiene el formato de planilla de campo (wide), en donde no repetimos el nombre de trat, sino que ubicamos los datos de cada rep en la misma linea soja %&gt;% pivot_longer( cols = matches(&quot;_&quot;), names_to = c(&quot;.value&quot;, &quot;bk&quot;), names_sep = &quot;_&quot;) -&gt; soja_long print soja_long soja_long Gráfico exploratorio de sev soja_long %&gt;% ggplot()+ aes(x=factor(fungic), y=sev)+ geom_boxplot(width=.2) + geom_point(aes(col=factor(bk))) Gráfico exploratorio de yield soja_long %&gt;% ggplot()+ aes(x=fungic, y=yield)+ geom_boxplot(width=.2) + geom_point(aes(col=factor(bk))) Ahora este dataset nos permitirá entrar al modelado unviaridado de severidad o rendimiento, o bien establecer relaciones entre ambas variables (correlación o regresión). Bonus 2 1.5 Mapa de prevalencia library(tidyverse) library(sf) theme_set(theme_bw()+ theme( panel.grid.major = element_line(color = gray(0.5), linetype = &quot;dashed&quot;, size = 0.05), panel.background = element_rect(fill = &quot;aliceblue&quot;), axis.text.x = element_text(size = 6), axis.text.y = element_text(size = 6), )) ARG2 &lt;- raster::getData(name = &quot;GADM&quot;, country = &quot;ARG&quot;, level = 2) %&gt;% st_as_sf() # https://datascience.blog.wzb.eu/2019/04/30/zooming-in-on-maps-with-sf-and-ggplot2/ BSAS &lt;- ARG2 %&gt;% filter(NAME_1 == &quot;Buenos Aires&quot;) Cortamos la region de nuestro interes SEBA &lt;- st_crop(BSAS, xmin = -60, xmax = -57, ymin = -39, ymax = -37) Cuantos partidos quedaron incluidos? SEBA %&gt;% as_tibble %&gt;% count(NAME_2) Quedaron incluidos 18 partidos: Simulamos un dataset de prevalencia para 4 años cancro &lt;- SEBA %&gt;% as_tibble %&gt;% mutate(preval_2015 = rnorm(n=18, mean=30, sd=10), preval_2016 = preval_2015*1.05 + rnorm(1, 3, 2) , preval_2017 = preval_2016*1.05 + rnorm(1, 3, 2), preval_2018 = preval_2017*1.05 + rnorm(1, 3, 2)) %&gt;% pivot_longer(preval_2015:preval_2018, names_to = &quot;anio&quot;, values_to = &quot;prevalencia&quot;, names_prefix = &quot;preval_&quot;) cancro SEBA_cancro &lt;- SEBA %&gt;% left_join(cancro, by= &quot;NAME_2&quot;) #%&gt;% SEBA_cancro %&gt;% ggplot() + geom_sf(data=SEBA)+ geom_sf(aes(fill=prevalencia))+ scale_fill_gradient2(midpoint = 35, low = &#39;green2&#39;, mid = &#39;yellow&#39;, high = &#39;red3&#39;, na.value = &#39;gray95&#39;)+ facet_wrap(&quot;anio&quot;)+ labs(title = &quot;Evolución de la prevalencia del cancro del tallo de girasol&quot;, x = NULL, y = NULL, fill = &quot;Prevalencia&quot;) ggsave(last_plot(), file = &quot;fig/prevalencia_cancro.png&quot;, w=6, h=4) "]]
